Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> GO direction
Rule 2     expression -> GO num direction
Rule 3     expression -> GO direction num
Rule 4     num -> NUMBER
Rule 5     direction -> left
Rule 6     direction -> right
Rule 7     direction -> top
Rule 8     direction -> down
Rule 9     left -> LEFT
Rule 10    right -> RIGHT
Rule 11    top -> TOP
Rule 12    down -> DOWN
Rule 13    expression -> ASK

Terminals, with rules where they appear

ASK                  : 13
DOWN                 : 12
GO                   : 1 2 3
LEFT                 : 9
NUMBER               : 4
RIGHT                : 10
TOP                  : 11
error                : 

Nonterminals, with rules where they appear

direction            : 1 2 3
down                 : 8
expression           : 0
left                 : 5
num                  : 2 3
right                : 6
top                  : 7

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . GO direction
    (2) expression -> . GO num direction
    (3) expression -> . GO direction num
    (13) expression -> . ASK

    GO              shift and go to state 3
    ASK             shift and go to state 1

    expression                     shift and go to state 2

state 1

    (13) expression -> ASK .

    $end            reduce using rule 13 (expression -> ASK .)


state 2

    (0) S' -> expression .



state 3

    (1) expression -> GO . direction
    (2) expression -> GO . num direction
    (3) expression -> GO . direction num
    (5) direction -> . left
    (6) direction -> . right
    (7) direction -> . top
    (8) direction -> . down
    (4) num -> . NUMBER
    (9) left -> . LEFT
    (10) right -> . RIGHT
    (11) top -> . TOP
    (12) down -> . DOWN

    NUMBER          shift and go to state 9
    LEFT            shift and go to state 12
    RIGHT           shift and go to state 14
    TOP             shift and go to state 4
    DOWN            shift and go to state 6

    direction                      shift and go to state 5
    left                           shift and go to state 11
    down                           shift and go to state 7
    num                            shift and go to state 8
    right                          shift and go to state 10
    top                            shift and go to state 13

state 4

    (11) top -> TOP .

    $end            reduce using rule 11 (top -> TOP .)
    NUMBER          reduce using rule 11 (top -> TOP .)


state 5

    (1) expression -> GO direction .
    (3) expression -> GO direction . num
    (4) num -> . NUMBER

    $end            reduce using rule 1 (expression -> GO direction .)
    NUMBER          shift and go to state 9

    num                            shift and go to state 15

state 6

    (12) down -> DOWN .

    $end            reduce using rule 12 (down -> DOWN .)
    NUMBER          reduce using rule 12 (down -> DOWN .)


state 7

    (8) direction -> down .

    $end            reduce using rule 8 (direction -> down .)
    NUMBER          reduce using rule 8 (direction -> down .)


state 8

    (2) expression -> GO num . direction
    (5) direction -> . left
    (6) direction -> . right
    (7) direction -> . top
    (8) direction -> . down
    (9) left -> . LEFT
    (10) right -> . RIGHT
    (11) top -> . TOP
    (12) down -> . DOWN

    LEFT            shift and go to state 12
    RIGHT           shift and go to state 14
    TOP             shift and go to state 4
    DOWN            shift and go to state 6

    direction                      shift and go to state 16
    left                           shift and go to state 11
    down                           shift and go to state 7
    right                          shift and go to state 10
    top                            shift and go to state 13

state 9

    (4) num -> NUMBER .

    $end            reduce using rule 4 (num -> NUMBER .)
    LEFT            reduce using rule 4 (num -> NUMBER .)
    RIGHT           reduce using rule 4 (num -> NUMBER .)
    TOP             reduce using rule 4 (num -> NUMBER .)
    DOWN            reduce using rule 4 (num -> NUMBER .)


state 10

    (6) direction -> right .

    $end            reduce using rule 6 (direction -> right .)
    NUMBER          reduce using rule 6 (direction -> right .)


state 11

    (5) direction -> left .

    $end            reduce using rule 5 (direction -> left .)
    NUMBER          reduce using rule 5 (direction -> left .)


state 12

    (9) left -> LEFT .

    NUMBER          reduce using rule 9 (left -> LEFT .)
    $end            reduce using rule 9 (left -> LEFT .)


state 13

    (7) direction -> top .

    $end            reduce using rule 7 (direction -> top .)
    NUMBER          reduce using rule 7 (direction -> top .)


state 14

    (10) right -> RIGHT .

    NUMBER          reduce using rule 10 (right -> RIGHT .)
    $end            reduce using rule 10 (right -> RIGHT .)


state 15

    (3) expression -> GO direction num .

    $end            reduce using rule 3 (expression -> GO direction num .)


state 16

    (2) expression -> GO num direction .

    $end            reduce using rule 2 (expression -> GO num direction .)

